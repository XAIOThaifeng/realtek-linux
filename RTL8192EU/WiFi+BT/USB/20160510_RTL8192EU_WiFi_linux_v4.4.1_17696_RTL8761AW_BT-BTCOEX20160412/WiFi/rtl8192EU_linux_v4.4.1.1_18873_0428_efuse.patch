diff -Nur rtl8192EU_linux_v4.4.1.1_18873.20160805_BTCOEX20160412-0042/hal/rtl8192e/rtl8192e_hal_init.c rtl8192EU_linux_v4.4.1.1_18873.20170428_BTCOEX20160412-0042/hal/rtl8192e/rtl8192e_hal_init.c
--- rtl8192EU_linux_v4.4.1.1_18873.20160805_BTCOEX20160412-0042/hal/rtl8192e/rtl8192e_hal_init.c	2016-08-05 16:28:00.000000000 +0800
+++ rtl8192EU_linux_v4.4.1.1_18873.20170428_BTCOEX20160412-0042/hal/rtl8192e/rtl8192e_hal_init.c	2017-04-28 15:09:36.912384500 +0800
@@ -1678,7 +1678,7 @@
 
 			//RTPRINT(FEEPROM, EFUSE_READ_ALL, ("extended header efuse_Addr-%d efuse_data=%x\n", eFuse_Addr, *rtemp8));	
 			
-			if((*rtemp8 & 0x0F) == 0x0F)
+			if((*rtemp8 & 0x0F) == 0x0F && (*rtemp8 != 0xFF))
 			{
 				eFuse_Addr++;			
 				ReadEFuseByte(Adapter, eFuse_Addr, rtemp8, bPseudoTest); 
@@ -1691,6 +1691,11 @@
 			}
 			else
 			{
+				if (*rtemp8 == 0xFF) {
+					*rtemp8 = 0x0F;
+					efuse_OneByteWrite(Adapter, eFuse_Addr, *rtemp8, bPseudoTest);
+					continue;
+				}
 				offset = ((*rtemp8 & 0xF0) >> 1) | u1temp;
 				wren = (*rtemp8 & 0x0F);
 				eFuse_Addr++;				
@@ -2160,7 +2165,7 @@
 				hoffset = efuse_data;
 				efuse_addr++;
 				efuse_OneByteRead(pAdapter, efuse_addr ,&efuse_data, bPseudoTest);
-				if((efuse_data & 0x0F) == 0x0F)
+				if((efuse_data & 0x0F) == 0x0F && (efuse_data != 0xFF))
 				{
 					efuse_addr++;
 					continue;
@@ -2194,7 +2199,7 @@
 	else
 	{
 		rtw_hal_set_hwreg(pAdapter, HW_VAR_EFUSE_BYTES, (u8 *)&efuse_addr);
-		//RTPRINT(FEEPROM, EFUSE_PG, ("hal_EfuseGetCurrentSize_8723A(), return %d\n", efuse_addr));
+		DBG_871X("%s(), return %d\n", __func__,efuse_addr);
 	}
 
 	return efuse_addr;
@@ -2341,6 +2346,9 @@
 	return ret;
 }
 
+
+#if 0
+
 int
 hal_EfusePgPacketWrite_8192E(IN	PADAPTER	pAdapter, 
 					IN	u8 			offset,
@@ -2768,7 +2776,605 @@
 	
 	return _TRUE;
 }
+#else
+
+BOOLEAN efuse_PgPacketCheck(
+	PADAPTER	pAdapter,
+	u8		efuseType,
+	BOOLEAN		bPseudoTest
+)
+{
+	HAL_DATA_TYPE	*pHalData = GET_HAL_DATA(pAdapter);
+
+	if (Efuse_GetCurrentSize(pAdapter, efuseType, bPseudoTest) >= (EFUSE_REAL_CONTENT_LEN_8192E - EFUSE_OOB_PROTECT_BYTES_8192E)) {
+		DBG_871X("%s()error: %x >= %x\n", __func__, Efuse_GetCurrentSize(pAdapter, efuseType, bPseudoTest), (EFUSE_REAL_CONTENT_LEN_8192E - EFUSE_OOB_PROTECT_BYTES_8192E));
+		return _FALSE;
+	}
+
+	return _TRUE;
+}
+
+
+VOID
+efuse_PgPacketConstruct(
+	IN	    u8			offset,
+	IN	    u8			word_en,
+	IN	    u8			*pData,
+	IN OUT	PPGPKT_STRUCT	pTargetPkt
+)
+{
+	_rtw_memset((PVOID)pTargetPkt->data, 0xFF, sizeof(u8) * 8);
+	pTargetPkt->offset = offset;
+	pTargetPkt->word_en = word_en;
+	efuse_WordEnableDataRead(word_en, pData, pTargetPkt->data);
+	pTargetPkt->word_cnts = Efuse_CalculateWordCnts(pTargetPkt->word_en);
+
+	DBG_871X("efuse_PgPacketConstruct(), targetPkt, offset=%d, word_en=0x%x, word_cnts=%d\n", pTargetPkt->offset, pTargetPkt->word_en, pTargetPkt->word_cnts);
+}
+
+u2Byte Hal_EfusePgPacketExceptionHandle_8192E(
+		PADAPTER	pAdapter,
+		u2Byte		ErrOffset
+		)
+{
+	BOOLEAN bPseudoTest = FALSE;
+	u8 next = 0, next_next = 0, data = 0, i = 0, header = 0;
+	u8 s = 0;
+	u2Byte offset = ErrOffset;
+
+	efuse_OneByteRead(pAdapter, offset, &header, bPseudoTest);
+
+	if (EXT_HEADER(header)) {
+		s = ((header & 0xF0) >> 4);
+
+		/* Skip bad word enable to look two bytes ahead and determine if recoverable.*/
+		offset += 1;
+		efuse_OneByteRead(pAdapter, offset+1, &next, bPseudoTest);
+		efuse_OneByteRead(pAdapter, offset+2, &next_next, bPseudoTest);
+		if (next == 0xFF && next_next == 0xFF) {/* Have enough space to make fake data to recover bad header.*/
+			switch (s) {
+			case 0x0: case 0x2: case 0x4: case 0x6:
+			case 0x8: case 0xA: case 0xC:
+					for (i = 0; i < 3; ++i) {
+						efuse_OneByteWrite(pAdapter, offset, 0x27, bPseudoTest);
+						efuse_OneByteRead(pAdapter, offset, &data, bPseudoTest);
+						if (data == 0x27)
+							break;
+					}
+					break;
+			case 0xE:
+					for (i = 0; i < 3; ++i) {
+						efuse_OneByteWrite(pAdapter, offset, 0x17, bPseudoTest);
+						efuse_OneByteRead(pAdapter, offset, &data, bPseudoTest);
+						if (data == 0x17)
+							break;
+
+					break;
+			default:
+					break;
+			}
+			efuse_OneByteWrite(pAdapter, offset+1, 0xFF, bPseudoTest);
+			efuse_OneByteWrite(pAdapter, offset+2, 0xFF, bPseudoTest);
+			offset += 3;
+			ErrOffset = offset;
+		}
+	} else {/* 1-Byte header*/
+		if (ALL_WORDS_DISABLED(header)) {
+			u8 next = 0;
+
+			efuse_OneByteRead(pAdapter, offset+1, &next, bPseudoTest);
+			if (next == 0xFF) {/* Have enough space to make fake data to recover bad header.*/
+				header = (header & 0xF0) | 0x7;
+				for (i = 0; i < 3; ++i) {
+					efuse_OneByteWrite(pAdapter, offset, header, bPseudoTest);
+					efuse_OneByteRead(pAdapter, offset, &data, bPseudoTest);
+					if (data == header)
+						break;
+				}
+				efuse_OneByteWrite(pAdapter, offset+1, 0xFF, bPseudoTest);
+				efuse_OneByteWrite(pAdapter, offset+2, 0xFF, bPseudoTest);
+				offset += 2;
+				ErrOffset = offset;
+				}
+		}
+	}
+	}
+
+	return ErrOffset;
+}
+
+BOOLEAN hal_EfuseCheckIfDatafollowed(
+	IN		PADAPTER		pAdapter,
+	IN		u8			word_cnts,
+	IN		u16			startAddr,
+	IN		BOOLEAN			bPseudoTest
+)
+{
+	BOOLEAN		bRet = FALSE;
+	u8		i, efuse_data;
+
+	for (i = 0; i < (word_cnts * 2) ; i++) {
+		if (efuse_OneByteRead(pAdapter, (startAddr + i) , &efuse_data, bPseudoTest) && (efuse_data != 0xFF))
+			bRet = TRUE;
+	}
+
+	return bRet;
+}
+
+
+BOOLEAN
+hal_EfuseWordEnMatched(
+	IN	PPGPKT_STRUCT	pTargetPkt,
+	IN	PPGPKT_STRUCT	pCurPkt,
+	IN	u8			*pWden
+)
+{
+	u8	match_word_en = 0x0F;	/* default all words are disabled */
+
+	/* check if the same words are enabled both target and current PG packet */
+	if (((pTargetPkt->word_en & BIT0) == 0) &&
+		((pCurPkt->word_en & BIT0) == 0)) {
+		match_word_en &= ~BIT0;				/* enable word 0 */
+	}
+	if (((pTargetPkt->word_en & BIT1) == 0) &&
+		((pCurPkt->word_en & BIT1) == 0)) {
+		match_word_en &= ~BIT1;				/* enable word 1 */
+	}
+	if (((pTargetPkt->word_en & BIT2) == 0) &&
+		((pCurPkt->word_en & BIT2) == 0)) {
+		match_word_en &= ~BIT2;				/* enable word 2 */
+	}
+	if (((pTargetPkt->word_en & BIT3) == 0) &&
+		((pCurPkt->word_en & BIT3) == 0)) {
+		match_word_en &= ~BIT3;				/* enable word 3 */
+	}
+
+	*pWden = match_word_en;
+
+	if (match_word_en != 0xf)
+		return TRUE;
+	else
+		return FALSE;
+}
+
+
+BOOLEAN
+efuse_PgPacketPartialWrite(
+	IN	    PADAPTER		pAdapter,
+	IN	    u8			efuseType,
+	IN OUT	u16			*pAddr,
+	IN	    PPGPKT_STRUCT	pTargetPkt,
+	IN	    BOOLEAN			bPseudoTest
+)
+{
+	HAL_DATA_TYPE	*pHalData = GET_HAL_DATA(pAdapter);
+	PEFUSE_HAL		pEfuseHal = &(pHalData->EfuseHal);
+	BOOLEAN			bRet = _FALSE;
+	u8			i, efuse_data = 0, cur_header = 0;
+	u8			matched_wden = 0, badworden = 0;
+	u16			startAddr = 0;
+	PGPKT_STRUCT	curPkt;
+	u16			max_sec_num = (efuseType == EFUSE_WIFI) ? pEfuseHal->MaxSecNum_WiFi : pEfuseHal->MaxSecNum_BT;
+	u16			efuse_max = pEfuseHal->BankSize;
+	u16			efuse_max_available_len =
+		(efuseType == EFUSE_WIFI) ? pEfuseHal->TotalAvailBytes_WiFi : pEfuseHal->TotalAvailBytes_BT;
+
+	DBG_871X("efuse_PgPacketPartialWrite()\n");
+
+	if (bPseudoTest) {
+		pEfuseHal->fakeEfuseBank = (efuseType == EFUSE_WIFI) ? 0 : pEfuseHal->fakeEfuseBank;
+		Efuse_GetCurrentSize(pAdapter, efuseType, _TRUE);
+	}
+
+	 EFUSE_GetEfuseDefinition(pAdapter, efuseType, TYPE_AVAILABLE_EFUSE_BYTES_TOTAL, &efuse_max_available_len, bPseudoTest);
+	 EFUSE_GetEfuseDefinition(pAdapter, efuseType, TYPE_EFUSE_CONTENT_LEN_BANK, &efuse_max, bPseudoTest);
+
+	if (efuseType == EFUSE_WIFI) {
+		if (bPseudoTest) {
+#ifdef HAL_EFUSE_MEMORY
+			startAddr = (u16)pEfuseHal->fakeEfuseUsedBytes;
+#else
+			startAddr = (u16)fakeEfuseUsedBytes;
+#endif
+
+		} else
+			rtw_hal_get_hwreg(pAdapter, HW_VAR_EFUSE_BYTES, (u8 *)&startAddr);
+	} else {
+		if (bPseudoTest) {
+#ifdef HAL_EFUSE_MEMORY
+			startAddr = (u16)pEfuseHal->fakeBTEfuseUsedBytes;
+#else
+			startAddr = (u16)fakeBTEfuseUsedBytes;
+#endif
+
+		} else
+			rtw_hal_get_hwreg(pAdapter, HW_VAR_EFUSE_BT_BYTES, (u8 *)&startAddr);
+	}
+
+	startAddr %= efuse_max;
+	DBG_871X("%s: startAddr=%#X\n", __FUNCTION__, startAddr);
+	DBG_871X("efuse_PgPacketPartialWrite(), startAddr = 0x%X\n", startAddr);
+
+	while (1) {
+		if (startAddr >= efuse_max_available_len) {
+			bRet = _FALSE;
+			DBG_871X("startAddr(%d) >= efuse_max_available_len(%d)\n",
+				 startAddr, efuse_max_available_len);
+			break;
+		}
+
+		if (efuse_OneByteRead(pAdapter, startAddr, &efuse_data, bPseudoTest) && (efuse_data != 0xFF)) {
+			if (EXT_HEADER(efuse_data)) {
+				cur_header = efuse_data;
+				startAddr++;
+				efuse_OneByteRead(pAdapter, startAddr, &efuse_data, bPseudoTest);
+				if (ALL_WORDS_DISABLED(efuse_data)) {
+					u16 recoveredAddr = startAddr;
+
+					recoveredAddr = Hal_EfusePgPacketExceptionHandle_8192E(pAdapter, startAddr - 1);
+
+					if (recoveredAddr == (startAddr - 1)) {
+						DBG_871X("Error! All words disabled and the recovery failed, (Addr, Data) = (0x%X, 0x%X)\n",
+							 startAddr, efuse_data);
+						pAdapter->LastError = ERR_INVALID_DATA;
+						break;
+
+					} else {
+						startAddr = recoveredAddr;
+						DBG_871X("Bad extension header but recovered => Keep going.\n");
+						continue;
+					}
+				} else {
+					curPkt.offset = ((cur_header & 0xE0) >> 5) | ((efuse_data & 0xF0) >> 1);
+					curPkt.word_en = efuse_data & 0x0F;
+				}
+			} else {
+				if (ALL_WORDS_DISABLED(efuse_data)) {
+					u16 recoveredAddr = startAddr;
+
+					recoveredAddr = Hal_EfusePgPacketExceptionHandle_8192E(pAdapter, startAddr);
+					if (recoveredAddr != startAddr) {
+						efuse_OneByteRead(pAdapter, startAddr, &efuse_data, bPseudoTest);
+						DBG_871X("Bad header but recovered => Read header again.\n");
+					}
+				}
+
+				cur_header  =  efuse_data;
+				curPkt.offset = (cur_header >> 4) & 0x0F;
+				curPkt.word_en = cur_header & 0x0F;
+			}
+
+			if (curPkt.offset > max_sec_num) {
+				pAdapter->LastError = ERR_OUT_OF_RANGE;
+				pEfuseHal->Status = ERR_OUT_OF_RANGE;
+				bRet = _FALSE;
+				break;
+			}
+
+			curPkt.word_cnts = Efuse_CalculateWordCnts(curPkt.word_en);
+			/* if same header is found but no data followed */
+			/* write some part of data followed by the header. */
+			if ((curPkt.offset == pTargetPkt->offset) &&
+				(!hal_EfuseCheckIfDatafollowed(pAdapter, curPkt.word_cnts, startAddr + 1, bPseudoTest)) &&
+				hal_EfuseWordEnMatched(pTargetPkt, &curPkt, &matched_wden)) {
+				DBG_871X("Need to partial write data by the previous wrote header\n");
+				/* RT_ASSERT(_FALSE, ("Error, Need to partial write data by the previous wrote header!!\n")); */
+				/* Here to write partial data */
+				badworden = Efuse_WordEnableDataWrite(pAdapter, startAddr + 1, matched_wden, pTargetPkt->data, bPseudoTest);
+				if (badworden != 0x0F) {
+					u32 PgWriteSuccess = 0;
+					/* if write fail on some words, write these bad words again */
+
+					PgWriteSuccess = Efuse_PgPacketWrite(pAdapter, pTargetPkt->offset, badworden, pTargetPkt->data, bPseudoTest);
+
+					if (!PgWriteSuccess) {
+						bRet = _FALSE;	/* write fail, return */
+						break;
+					}
+				}
+				/* partial write ok, update the target packet for later use		 */
+				for (i = 0; i < 4; i++) {
+					if ((matched_wden & (0x1 << i)) == 0) {	/* this word has been written */
+						pTargetPkt->word_en |= (0x1 << i);	/* disable the word */
+					}
+				}
+				pTargetPkt->word_cnts = Efuse_CalculateWordCnts(pTargetPkt->word_en);
+			}
+			/* read from next header */
+			startAddr = startAddr + (curPkt.word_cnts * 2) + 1;
+		} else {
+			/* not used header, 0xff */
+			*pAddr = startAddr;
+			DBG_871X("Started from unused header offset=%d\n", startAddr);
+			bRet = _TRUE;
+			break;
+		}
+	}
+	return bRet;
+}
+
+
+BOOLEAN
+hal_EfuseFixHeaderProcess(
+	IN		PADAPTER			pAdapter,
+	IN		u8				efuseType,
+	IN		PPGPKT_STRUCT		pFixPkt,
+	IN		u16				*pAddr,
+	IN		BOOLEAN				bPseudoTest
+)
+{
+	u8	originaldata[8], badworden = 0;
+	u16	efuse_addr = *pAddr;
+	u32	PgWriteSuccess = 0;
+
+	_rtw_memset((PVOID)originaldata, 0xff, 8);
+
+	if (Efuse_PgPacketRead(pAdapter, pFixPkt->offset, originaldata, bPseudoTest)) {
+		/* check if data exist */
+		badworden = Efuse_WordEnableDataWrite(pAdapter, efuse_addr + 1, pFixPkt->word_en, originaldata, bPseudoTest);
+
+		if (badworden != 0xf) {	/* write fail */
+			PgWriteSuccess = Efuse_PgPacketWrite(pAdapter, pFixPkt->offset, badworden, originaldata, bPseudoTest);
+			if (!PgWriteSuccess)
+				return _FALSE;
+
+			else
+				efuse_addr = Efuse_GetCurrentSize(pAdapter, efuseType, bPseudoTest);
+		} else
+			efuse_addr = efuse_addr + (pFixPkt->word_cnts * 2) + 1;
+	} else
+		efuse_addr = efuse_addr + (pFixPkt->word_cnts * 2) + 1;
+	*pAddr = efuse_addr;
+	return _TRUE;
+}
+
+
+
+static u8
+hal_EfusePgPacketWrite2ByteHeader(
+	PADAPTER		padapter,
+	u8				efuseType,
+	u16				*pAddr,
+	PPGPKT_STRUCT	pTargetPkt,
+	u8				bPseudoTest)
+{
+	u16	efuse_addr, efuse_max_available_len = 0;
+	u8	pg_header = 0, tmp_header = 0, pg_header_temp = 0;
+	u8	repeatcnt = 0;
+
+
+	/*	RTW_INFO("%s\n", __FUNCTION__); */
+	EFUSE_GetEfuseDefinition(padapter, efuseType, TYPE_AVAILABLE_EFUSE_BYTES_BANK, &efuse_max_available_len, bPseudoTest);
+
+	efuse_addr = *pAddr;
+
+	if (efuse_addr >= efuse_max_available_len) {
+		DBG_871X("%s: addr(%d) over available(%d)!!\n", __FUNCTION__, efuse_addr, efuse_max_available_len);
+		return _FALSE;
+	}
+
+	while (efuse_addr < efuse_max_available_len) {
+		pg_header = ((pTargetPkt->offset & 0x07) << 5) | 0x0F;
+		efuse_OneByteWrite(padapter, efuse_addr, pg_header, bPseudoTest);
+		PHY_SetMacReg(padapter, EFUSE_TEST, BIT26, 0);
+		efuse_OneByteRead(padapter, efuse_addr, &tmp_header, bPseudoTest);
+		PHY_SetMacReg(padapter, EFUSE_TEST, BIT26, 1);
+
+		while (tmp_header == 0xFF || pg_header != tmp_header) {
+			if (repeatcnt++ > EFUSE_REPEAT_THRESHOLD_) {
+				DBG_871X("%s, Repeat over limit for pg_header!!\n", __FUNCTION__);
+				return _FALSE;
+			}
+
+			efuse_OneByteWrite(padapter, efuse_addr, pg_header, bPseudoTest);
+			efuse_OneByteRead(padapter, efuse_addr, &tmp_header, bPseudoTest);
+		}
+
+		/*to write ext_header*/
+		if (tmp_header == pg_header) {
+			efuse_addr++;
+			pg_header_temp = pg_header;
+			pg_header = ((pTargetPkt->offset & 0x78) << 1) | pTargetPkt->word_en;
+
+			efuse_OneByteWrite(padapter, efuse_addr, pg_header, bPseudoTest);
+			PHY_SetMacReg(padapter, EFUSE_TEST, BIT26, 0);
+			efuse_OneByteRead(padapter, efuse_addr, &tmp_header, bPseudoTest);
+			PHY_SetMacReg(padapter, EFUSE_TEST, BIT26, 1);
+
+			while (tmp_header == 0xFF || pg_header != tmp_header) {
+				if (repeatcnt++ > EFUSE_REPEAT_THRESHOLD_) {
+					DBG_871X("%s, Repeat over limit for ext_header!!\n", __FUNCTION__);
+					return _FALSE;
+				}
+
+				efuse_OneByteWrite(padapter, efuse_addr, pg_header, bPseudoTest);
+				efuse_OneByteRead(padapter, efuse_addr, &tmp_header, bPseudoTest);
+			}
+
+			if ((tmp_header & 0x0F) == 0x0F) {
+				if (repeatcnt++ > EFUSE_REPEAT_THRESHOLD_) {
+					DBG_871X("Repeat over limit for word_en!!\n");
+					return _FALSE;
+
+				} else {
+					if (tmp_header == 0xFF) {
+						DBG_871X("wrong word_en empty!!\n");
+						return _FALSE;
+					}	
+					efuse_addr++;
+					continue;
+				}
+			} else if (pg_header != tmp_header) {
+				PGPKT_STRUCT	fixPkt;
+
+				DBG_871X("Error, efuse_PgPacketWrite2ByteHeader(), offset PG fail, need to cover the existed data!!\n");
+				DBG_871X("Error condition for offset PG fail, need to cover the existed data\n");
+				fixPkt.offset = ((pg_header_temp & 0xE0) >> 5) | ((tmp_header & 0xF0) >> 1);
+				fixPkt.word_en = tmp_header & 0x0F;
+				fixPkt.word_cnts = Efuse_CalculateWordCnts(fixPkt.word_en);
+				if (!hal_EfuseFixHeaderProcess(padapter, efuseType, &fixPkt, &efuse_addr, bPseudoTest))
+					return _FALSE;
+			} else
+				break;
+		} else if ((tmp_header & 0x1F) == 0x0F) {/*wrong extended header*/
+				if (tmp_header == 0xFF) {
+					DBG_871X("wrong word_en empty!!\n");
+					return _FALSE;
+				}
+			efuse_addr += 2;
+			continue;
+		}
+	}
+
+	*pAddr = efuse_addr;
+
+	return _TRUE;
+}
+
+
+static u8
+hal_EfusePgPacketWrite1ByteHeader(
+	PADAPTER		pAdapter,
+	u8				efuseType,
+	u16				*pAddr,
+	PPGPKT_STRUCT	pTargetPkt,
+	u8				bPseudoTest)
+{
+	u8	bRet = _FALSE;
+	u8	pg_header = 0, tmp_header = 0;
+	u16	efuse_addr = *pAddr;
+	u8	repeatcnt = 0;
+
+
+	DBG_871X("%s\n", __func__);
+	pg_header = ((pTargetPkt->offset << 4) & 0xf0) | pTargetPkt->word_en;
+
+	efuse_OneByteWrite(pAdapter, efuse_addr, pg_header, bPseudoTest);
+	PHY_SetMacReg(pAdapter, EFUSE_TEST, BIT26, 0);
+	efuse_OneByteRead(pAdapter, efuse_addr, &tmp_header, bPseudoTest);
+	PHY_SetMacReg(pAdapter, EFUSE_TEST, BIT26, 1);
+
+	while (tmp_header == 0xFF || pg_header != tmp_header) {
+		if (repeatcnt++ > EFUSE_REPEAT_THRESHOLD_) {
+			DBG_871X("retry %d times fail!!\n", repeatcnt);
+			return FALSE;
+		}
+		efuse_OneByteWrite(pAdapter, efuse_addr, pg_header, bPseudoTest);
+		efuse_OneByteRead(pAdapter, efuse_addr, &tmp_header, bPseudoTest);
+		DBG_871X("===> %s: Keep %d-th retrying, tmp_header = 0x%X\n", __func__, repeatcnt, tmp_header);
+	}
+
+	if (tmp_header != pg_header) {
+		PGPKT_STRUCT	fixPkt;
+
+		DBG_871X("Error, %s(), offset PG fail, need to cover the existed data!!\n", __func__);
+		DBG_871X("pg_header(0x%X) != tmp_header(0x%X)\n", pg_header, tmp_header);
+		DBG_871X("Error condition for fixed PG packet, need to cover the existed data: (Addr, Data) = (0x%X, 0x%X)\n",
+							efuse_addr, tmp_header);
+		fixPkt.offset = (tmp_header>>4) & 0x0F;
+		fixPkt.word_en = tmp_header & 0x0F;
+		fixPkt.word_cnts = Efuse_CalculateWordCnts(fixPkt.word_en);
+		if (!hal_EfuseFixHeaderProcess(pAdapter, efuseType, &fixPkt, &efuse_addr, bPseudoTest))
+			return FALSE;
+	}
+
+	*pAddr = efuse_addr;
+
+	return _TRUE;
+}
+
+BOOLEAN	efuse_PgPacketWriteHeader(
+	PADAPTER		pAdapter,
+	u8			efuseType,
+	u16			*pAddr,
+	PPGPKT_STRUCT	pTargetPkt,
+	BOOLEAN			bPseudoTest)
+{
+	BOOLEAN		bRet = _FALSE;
+
+	if (pTargetPkt->offset >= EFUSE_MAX_SECTION_BASE)
+		bRet = hal_EfusePgPacketWrite2ByteHeader(pAdapter, efuseType, pAddr, pTargetPkt, bPseudoTest);
+	else
+		bRet = hal_EfusePgPacketWrite1ByteHeader(pAdapter, efuseType, pAddr, pTargetPkt, bPseudoTest);
+
+	return bRet;
+}
+
+
+static u8
+hal_EfusePgPacketWriteData(
+	PADAPTER		pAdapter,
+	u8				efuseType,
+	u16				*pAddr,
+	PPGPKT_STRUCT	pTargetPkt,
+	u8				bPseudoTest)
+{
+	u16	efuse_addr;
+	u8	badworden;
+
+
+	efuse_addr = *pAddr;
+	badworden = rtl8192E_Efuse_WordEnableDataWrite(pAdapter, efuse_addr + 1, pTargetPkt->word_en, pTargetPkt->data, bPseudoTest);
+	if (badworden != 0x0F) {
+		DBG_871X("%s: Fail!!\n", __FUNCTION__);
+		return _FALSE;
+	}
+
+	/*	RTW_INFO("%s: ok\n", __FUNCTION__); */
+	return _TRUE;
+}
 
+
+int
+hal_EfusePgPacketWrite_8192E(IN	PADAPTER	pAdapter,
+			u8			offset,
+			u8			word_en,
+			u8			*pData,
+			BOOLEAN		bPseudoTest)
+{
+	u8 efuseType = EFUSE_WIFI;
+	PGPKT_STRUCT	targetPkt;
+	u16			startAddr = 0;
+
+	DBG_871X("===> efuse_PgPacketWrite[%s], offset: 0x%X\n", (efuseType == EFUSE_WIFI) ? "WIFI" : "BT", offset);
+
+	/* 4 [1] Check if the remaining space is available to write. */
+	if (!efuse_PgPacketCheck(pAdapter, efuseType, bPseudoTest)) {
+		pAdapter->LastError = ERR_WRITE_PROTECT;
+		DBG_871X("efuse_PgPacketCheck(), fail!!\n");
+		return _FALSE;
+	}
+
+	/* 4 [2] Construct a packet to write: (Data, Offset, and WordEnable) */
+	efuse_PgPacketConstruct(offset, word_en, pData, &targetPkt);
+
+
+	/* 4 [3] Fix headers without data or fix bad headers, and then return the address where to get started. */
+	if (!efuse_PgPacketPartialWrite(pAdapter, efuseType, &startAddr, &targetPkt, bPseudoTest)) {
+		pAdapter->LastError = ERR_INVALID_DATA;
+		DBG_871X("efuse_PgPacketPartialWrite(), fail!!\n");
+		return _FALSE;
+	}
+
+	/* 4 [4] Write the (extension) header. */
+	if (!efuse_PgPacketWriteHeader(pAdapter, efuseType, &startAddr, &targetPkt, bPseudoTest)) {
+		pAdapter->LastError = ERR_IO_FAILURE;
+		DBG_871X("efuse_PgPacketWriteHeader(), fail!!\n");
+		return _FALSE;
+	}
+
+	/* 4 [5] Write the data. */
+	if (!hal_EfusePgPacketWriteData(pAdapter, efuseType, &startAddr, &targetPkt, bPseudoTest)) {
+		pAdapter->LastError = ERR_IO_FAILURE;
+		DBG_871X("efuse_PgPacketWriteData(), fail!!\n");
+		return _FALSE;
+	}
+
+	DBG_871X("<=== efuse_PgPacketWrite\n");
+	return _TRUE;
+}
+
+#endif
 static int
 rtl8192E_Efuse_PgPacketWrite(IN	PADAPTER	pAdapter,
 					IN	u8 			offset,
diff -Nur rtl8192EU_linux_v4.4.1.1_18873.20160805_BTCOEX20160412-0042/include/rtw_version.h rtl8192EU_linux_v4.4.1.1_18873.20170428_BTCOEX20160412-0042/include/rtw_version.h
--- rtl8192EU_linux_v4.4.1.1_18873.20160805_BTCOEX20160412-0042/include/rtw_version.h	2016-08-05 16:28:00.000000000 +0800
+++ rtl8192EU_linux_v4.4.1.1_18873.20170428_BTCOEX20160412-0042/include/rtw_version.h	2017-04-24 11:00:18.085738700 +0800
@@ -1,2 +1,2 @@
-#define DRIVERVERSION	"v4.4.1.1_18873.20160805_BTCOEX20160412-0042"
+#define DRIVERVERSION	"v4.4.1.1_18873.20170428_BTCOEX20160412-0042"
 #define BTCOEXVERSION	"BTCOEX20160412-0042"
diff -Nur rtl8192EU_linux_v4.4.1.1_18873.20160805_BTCOEX20160412-0042/os_dep/linux/ioctl_linux.c rtl8192EU_linux_v4.4.1.1_18873.20170428_BTCOEX20160412-0042/os_dep/linux/ioctl_linux.c
--- rtl8192EU_linux_v4.4.1.1_18873.20160805_BTCOEX20160412-0042/os_dep/linux/ioctl_linux.c	2016-08-05 16:28:00.000000000 +0800
+++ rtl8192EU_linux_v4.4.1.1_18873.20170428_BTCOEX20160412-0042/os_dep/linux/ioctl_linux.c	2017-04-24 10:30:21.754302600 +0800
@@ -11126,7 +11126,7 @@
 		DBG_871X("%s: after rtw_BT_efuse_map_write to _rtw_memcmp\n", __func__);
 		if (rtw_efuse_mask_map_read(padapter, 0x00, EFUSE_MAP_SIZE, ShadowMapWiFi) == _SUCCESS)
 		{
-			if (_rtw_memcmp((void*)ShadowMapWiFi ,(void*)setdata,cnts))
+			if (_rtw_memcmp((void*)ShadowMapWiFi, (void*)pEfuseHal->fakeEfuseModifiedMap, cnts))
 			{
 				DBG_871X("%s: WiFi write map afterf compare OK\n", __FUNCTION__);
 				sprintf(extra, "WiFi write map compare OK\n");
